# intelligent_coder.py
"""
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –õ4.‚Ññ4
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ archiver_huffman.py –∏ universal_decoder.py
"""

import os
import struct
import argparse
from pathlib import Path
from binascii import crc32

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
from archiver_huffman import huffman_encode, huffman_decode
from archiver_huffman import ALG_NOCTX_NONE, ALG_NOCTX_HUFFMAN, ALG_PROT_CRC32

def intelligent_encode_file(data, force_algorithm=None, enable_crc=False):
    """
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    
    Args:
        data: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        force_algorithm: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        enable_crc: –≤–∫–ª—é—á–∏—Ç—å CRC
    
    Returns:
        (algorithm_code, encoded_data, meta_info, final_size)
    """
    n_original = len(data)
    
    if force_algorithm is not None:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        if force_algorithm == 0:
            # –ë–µ–∑ —Å–∂–∞—Ç–∏—è
            return 0, data, b'', n_original
        elif force_algorithm == 3:
            # –•–∞—Ñ—Ñ–º–∞–Ω
            encoded, meta = huffman_encode(data)
            final_size = len(encoded) + len(meta)
            if enable_crc:
                crc_value = crc32(data) & 0xffffffff
                meta += struct.pack('<I', crc_value)
                final_size += 4
            return 3, encoded, meta, final_size
    else:
        # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        encoded, meta = huffman_encode(data)
        
        # –†–∞—Å—á–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –æ–±—ä–µ–º–∞
        n_compressed_data = len(encoded)
        n_meta = len(meta)
        n_compressed_total = n_compressed_data + n_meta
        
        if enable_crc:
            n_compressed_total += 4
        
        print(f"  –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {n_original} –±–∞–π—Ç")
        print(f"  –°–∂–∞—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ: {n_compressed_data} –±–∞–π—Ç")
        print(f"  –ú–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {n_meta} –±–∞–π—Ç")
        print(f"  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {n_compressed_total} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç–∏ —Å–∂–∞—Ç–∏—è
        if n_compressed_total >= n_original:
            print("  ‚ö° –ù–µ—Å–∂–∞—Ç–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–≥–æ–¥–Ω–µ–µ")
            return 0, data, b'', n_original
        else:
            print("  ‚úÖ –°–∂–∞—Ç–∏–µ –≤—ã–≥–æ–¥–Ω–æ")
            final_size = n_compressed_total
            if enable_crc:
                crc_value = crc32(data) & 0xffffffff
                meta += struct.pack('<I', crc_value)
                final_size += 4
            return 3, encoded, meta, final_size

def create_intelligent_archive(input_files, output_file, force_algorithm=None, enable_crc=False):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
    """
    entries = []
    data_blocks = []
    
    print("üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤...")
    
    for input_file in input_files:
        input_path = Path(input_file)
        if not input_path.exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
            continue
            
        print(f"\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞: {input_path.name}")
        
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        with open(input_path, 'rb') as f:
            data = f.read()
        
        # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        algorithm_code, encoded_data, meta_info, final_size = intelligent_encode_file(
            data, force_algorithm, enable_crc
        )
        
        # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
        entry = {
            'type': 1,  # ENTRY_FILE
            'relpath': input_path.name,
            'orig_size': len(data),
            'stored_size': len(encoded_data),
            'service': meta_info,
            'algorithm_code': algorithm_code
        }
        
        entries.append(entry)
        data_blocks.append(encoded_data)
        
        # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        efficiency = (len(data) - final_size) / len(data) * 100 if len(data) > 0 else 0
        print(f"  –ê–ª–≥–æ—Ä–∏—Ç–º: {'–ë–µ–∑ —Å–∂–∞—Ç–∏—è' if algorithm_code == 0 else '–•–∞—Ñ—Ñ–º–∞–Ω'}")
        print(f"  –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:+.1f}%")
    
    if not entries:
        print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    return save_archive_v3(output_file, entries, data_blocks, enable_crc)

def save_archive_v3(output_path, entries, data_blocks, enable_crc):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–µ—Ä—Å–∏–∏ 3 (—Å–æ–≤–º–µ—Å—Ç–∏–º —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –¥–µ–∫–æ–¥–µ—Ä–æ–º)
    """
    # –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ archiver_huffman.py)
    signature = b'L3ARCH04'
    version = 3  # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–µ—Ä–∞
    alg_ctx = 0
    alg_noctx = 0  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    alg_prot = ALG_PROT_CRC32 if enable_crc else 0
    reserved = 0
    
    # –°–±–æ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø–∏—Å–µ–π
    table_bytes = bytearray()
    for entry in entries:
        relpath_bytes = entry['relpath'].encode('utf-8')
        service_bytes = bytes([entry['algorithm_code']]) + entry['service']  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ service
        
        table_bytes += struct.pack('<B', entry['type'])  # —Ç–∏–ø –∑–∞–ø–∏—Å–∏
        table_bytes += struct.pack('<H', len(relpath_bytes))  # –¥–ª–∏–Ω–∞ –ø—É—Ç–∏
        table_bytes += relpath_bytes  # –ø—É—Ç—å
        table_bytes += struct.pack('<Q', entry['orig_size'])  # –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        table_bytes += struct.pack('<Q', entry['stored_size'])  # —Ä–∞–∑–º–µ—Ä –≤ –∞—Ä—Ö–∏–≤–µ
        table_bytes += struct.pack('<I', len(service_bytes))  # –¥–ª–∏–Ω–∞ service
        table_bytes += service_bytes  # service –¥–∞–Ω–Ω—ã–µ
    
    # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    fixed_header_len = 8 + 2 + 1 + 1 + 1 + 1 + 8 + 4  # —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ + –≤–µ—Ä—Å–∏—è + alg_ctx + alg_noctx + alg_prot + reserved + header_size + num_entries
    header_size = fixed_header_len + len(table_bytes)
    
    # –ó–∞–ø–∏—Å—å –∞—Ä—Ö–∏–≤–∞
    with open(output_path, 'wb') as f:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        f.write(signature)
        f.write(struct.pack('<H', version))
        f.write(struct.pack('<B', alg_ctx))
        f.write(struct.pack('<B', alg_noctx))
        f.write(struct.pack('<B', alg_prot))
        f.write(struct.pack('<B', reserved))
        f.write(struct.pack('<Q', header_size))
        f.write(struct.pack('<I', len(entries)))
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
        f.write(table_bytes)
        
        # –î–∞–Ω–Ω—ã–µ
        for data_block in data_blocks:
            f.write(data_block)
    
    return True

def main():
    parser = argparse.ArgumentParser(description='–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ—Ä –õ4.‚Ññ4')
    parser.add_argument('inputs', nargs='+', help='–í—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã')
    parser.add_argument('-o', '--output', required=True, help='–í—ã—Ö–æ–¥–Ω–æ–π –∞—Ä—Ö–∏–≤')
    parser.add_argument('--algorithm', type=int, choices=[0, 3], 
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞: 0-–±–µ–∑ —Å–∂–∞—Ç–∏—è, 3-–•–∞—Ñ—Ñ–º–∞–Ω')
    parser.add_argument('--crc', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É CRC')
    
    args = parser.parse_args()
    
    print("üéØ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ—Ä –õ4.‚Ññ4")
    print("=" * 50)
    
    if args.algorithm is not None:
        print(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –∞–ª–≥–æ—Ä–∏—Ç–º {args.algorithm}")
    else:
        print("üîç –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    if args.crc:
        print("üîí CRC32: –≤–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
    
    success = create_intelligent_archive(args.inputs, args.output, args.algorithm, args.crc)
    
    if success:
        print(f"\n‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {args.output}")
        archive_size = os.path.getsize(args.output)
        print(f"üì¶ –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {archive_size} –±–∞–π—Ç")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞")

if __name__ == '__main__':
    main()