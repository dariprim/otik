#!/usr/bin/env python3
import math
import argparse
from collections import Counter
import os

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def compute_entropy_and_lengths(text, encoding="UTF-32"):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞:
    - —ç–Ω—Ç—Ä–æ–ø–∏—é
    - —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    - —Ä–∞–∑–º–µ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    - –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –¥–ª–∏–Ω—ã –∞—Ä—Ö–∏–≤–∞
    –¢–∞–∫–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–∏–º–≤–æ–ª–æ–≤: (—Å–∏–º–≤–æ–ª, –∫–æ–¥, —á–∞—Å—Ç–æ—Ç–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è).
    """

    # 1. –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
    n = len(text)

    # 2. –ß–∞—Å—Ç–æ—Ç—ã –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    freqs = Counter(text)

    # 3. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
    probs = {ch: count / n for ch, count in freqs.items()}

    # 4. –≠–Ω—Ç—Ä–æ–ø–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    entropy = -sum(p * math.log2(p) for p in probs.values())

    # 5. –°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–±–∏—Ç)
    total_info_bits = n * entropy

    # 6. –ú–æ—â–Ω–æ—Å—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç–∞
    alphabet_size = len(freqs)

    # 7. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: 64-–±–∏—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
    meta_size = 8

    # 8. –†–∞–∑–º–µ—Ä –∑–∞–ø–∏—Å–∏ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏)
    if encoding == "UTF-8":
        meta_size += sum(len(ch.encode("utf-8")) + 8 for ch in freqs)
    elif encoding == "UTF-16":
        meta_size += alphabet_size * (2 + 8)
    else:  # UTF-32
        meta_size += alphabet_size * (4 + 8)

    # 9. –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª–∏–Ω—ã –∞—Ä—Ö–∏–≤–∞ (–±–∏—Ç ‚Üí –æ–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö –¥–æ –±–∞–π—Ç)
    archive_lower_bound_bits = total_info_bits + meta_size * 8
    archive_lower_bound_bytes = math.ceil(archive_lower_bound_bits / 8)

    # 10. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –µ—Å–ª–∏ –±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –≤—Å–µ —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –≤—Å–µ–≥–æ Unicode
    full_unicode_size = 1114112 * 8  # 8 –±–∞–π—Ç * 1,114,112 —Å–∏–º–≤–æ–ª–æ–≤

    # 11. –¢–∞–±–ª–∏—Ü–∞ —Å–∏–º–≤–æ–ª–æ–≤
    table = []
    for ch, count in freqs.items():
        p = probs[ch]
        info = -math.log2(p)
        table.append((ch, ord(ch), count, p, info))

    return {
        "n": n,
        "alphabet_size": alphabet_size,
        "entropy": entropy,
        "total_info_bits": total_info_bits,
        "meta_size_bytes": meta_size,
        "archive_lower_bound_bytes": archive_lower_bound_bytes,
        "full_unicode_size_bytes": full_unicode_size,
        "table": table
    }


def format_report(results):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    """

    lines = []
    lines.append("\n=== –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç ===")
    lines.append(f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–∏–º–≤–æ–ª—ã): {results['n']}")
    lines.append(f"–ú–æ—â–Ω–æ—Å—Ç—å –∞–ª—Ñ–∞–≤–∏—Ç–∞ A1: {results['alphabet_size']}")
    lines.append(f"–≠–Ω—Ç—Ä–æ–ø–∏—è H(Q): {results['entropy']:.4f} –±–∏—Ç/—Å–∏–º–≤–æ–ª")
    lines.append(f"–°—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {results['total_info_bits']:.2f} –±–∏—Ç")
    lines.append(f"–†–∞–∑–º–µ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {results['meta_size_bytes']} –±–∞–π—Ç")
    lines.append(f"–û—Ü–µ–Ω–∫–∞ —Å–Ω–∏–∑—É –¥–ª–∏–Ω—ã –∞—Ä—Ö–∏–≤–∞: {results['archive_lower_bound_bytes']} –±–∞–π—Ç")
    lines.append(f"–ï—Å–ª–∏ –±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –≤—Å–µ–≥–æ Unicode: "
                 f"{results['full_unicode_size_bytes']/1024/1024:.2f} –ú–ë\n")

    # === –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É ===
    lines.append("=== –¢–∞–±–ª–∏—Ü–∞ (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É) ===")
    lines.append(f"{'–°–∏–º–≤–æ–ª':^8} {'–ö–æ–¥':^6} {'Count':^10} {'p(j)':^12} {'I(j), –±–∏—Ç':^12}")
    for ch, code, count, p, info in sorted(results["table"], key=lambda x: x[1]):
        symbol = ch if ch.isprintable() else f"U+{code:04X}"
        lines.append(f"{symbol:^8} {code:^6} {count:^10} {p:^12.6f} {info:^12.4f}")

    # === –¢–∞–±–ª–∏—Ü–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç ===
    lines.append("\n=== –¢–∞–±–ª–∏—Ü–∞ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∞—Å—Ç–æ—Ç) ===")
    lines.append(f"{'–°–∏–º–≤–æ–ª':^8} {'–ö–æ–¥':^6} {'Count':^10} {'p(j)':^12} {'I(j), –±–∏—Ç':^12}")
    for ch, code, count, p, info in sorted(results["table"], key=lambda x: x[2], reverse=True):
        symbol = ch if ch.isprintable() else f"U+{code:04X}"
        lines.append(f"{symbol:^8} {code:^6} {count:^10} {p:^12.6f} {info:^12.4f}")

    return "\n".join(lines)


def save_report(report_text, filename="report_unicode.txt"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á—ë—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."""
    with open(filename, "w", encoding="utf-8") as f:
        f.write(report_text)
    print(f"\n‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {filename}")


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ ===
def generate_test_files():
    #python3 unicode_entropy.py dummy --gen-tests
    #python3 unicode_entropy.py test_files/mixed.txt --encoding UTF-32 --save
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:
    1. text.txt ‚Äì –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    2. binary.bin ‚Äì –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    3. mixed.txt ‚Äì —Ç–µ–∫—Å—Ç —Å Unicode-—Å–∏–º–≤–æ–ª–∞–º–∏
    """
    os.makedirs("test_files", exist_ok=True)

    with open("text.txt", "w", encoding="utf-8") as f:
        f.write("hello hello entropy test\n")

    with open("test_files/mixed.txt", "w", encoding="utf-8") as f:
        f.write("–ü—Ä–∏–≤–µ—Ç üåç! Hello ‰∏ñÁïå! 12345\n")

    with open("test_files/binary.bin", "wb") as f:
        f.write(os.urandom(64))  # 64 —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–π—Ç–∞

    print("\nüìÇ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤ –ø–∞–ø–∫–µ test_files/")


# === –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ===
def main():
    parser = argparse.ArgumentParser(description="–õ2: –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ Unicode-—Å–∏–º–≤–æ–ª–∞–º")
    parser.add_argument("file", help="–§–∞–π–ª –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8")
    parser.add_argument("--encoding", choices=["UTF-8", "UTF-16", "UTF-32"], default="UTF-32",
                        help="–§–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ —á–∞—Å—Ç–æ—Ç")
    parser.add_argument("--save", action="store_true", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª")
    parser.add_argument("--gen-tests", action="store_true", help="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã")
    args = parser.parse_args()

    if args.gen_tests:
        generate_test_files()
        return

    with open(args.file, "r", encoding="utf-8", errors="ignore") as f:
        text = f.read()

    results = compute_entropy_and_lengths(text, args.encoding)
    report_text = format_report(results)

    print(report_text)

    if args.save:
        save_report(report_text)


if __name__ == "__main__":
    main()
